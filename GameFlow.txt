Game Turn 
if not player.in_game: 
    switch turn()

(skip, d1, d2) = Is Player in Jail ?
    Does player have a community chest or a chance jail free card? 
        Does the player want to use the card? 
            if yes -> roll, return (false, d1, d2)
        
    Have they tried to roll a double less than 3 times? 
        if yes, does the player want to try rolling a double? 
            Roll 
            if double --> roll, return (false, d1, d2)
            else --> return (true, None, None)
    
    player.pay(50)
    If player in-game --> roll, return  (false, d1, d2)
    else --> return (true, -1, -1)


if skip:
    switch turn 
    continue 

if d1 is none and d2 is none: 
    d1, d2 = roll() 

player.move(d1+d2)
tile = board[player.get_position()]

if isinstance(tile, Street): 
    handle_street_landing(player, tile)

if isinstance(tile, RailRoad): 
    handle_railroad_landing(player, tile)

if isinstance(tile, Utility): 
    handle_utility_landing(player, tile)

if isinstance(tile, Chance): 
    handle_chance_landing(player, tile)

if isinstance(tile, CommunityChest): 
    handle_community_chest_landing(player, tile)

if isinstance(tile, Tax): 
    handle_tax_landing(player, tile)

if isinstance(Jail, Tax): 
    handle_go_to_jail_landing(player)

# This will check if the player can buy any houses and based on some heuristic it will buy houses and hotels 
player.buy_houses_and_hotels()

if d1 == d2:
    if player.doubles == 3:
        player.go_to_jail()
        player.doubles = 0
        Switch Turn()
        
    else 
        player.doubles += 1
else:
    player.doubles = 0
    Switch Turn()

if win_check():
    break 



Player Class 
- name
- w_buy_building: weight of buying a building
- w_buy_railroad: weight of buying a railroad
- w_buy_utility: weight of buying a utility 
- w_use_jail_free_card: weight of using a jail free card
- w_roll_double_in_jail: weight of deciding to roll a double if in jail
- min_cash: Min cash to hold at all times 
- jail_roll-attemps: jail roll attempts
- consecutive_doubles: number of  times the player has gotten consecutive doubles
- is_in_jail 
- cash: total cash 
- liquidity: total liquidity = cash + mortgage value of all unmortgaged properties + houses value (house price / 2) + hotels value (hotel price / 2)
    if any time the money
- streets: dictionary of all the streets owned based on group color and a list of streets owned in that
- railroad: list of all railroads 
- utilities: list of all utilities
- is_in_game
- position: place on the board
- last_dice_roll: last dice roll number just needed for utilities calculation
- community_chest_jail_free_card: If the player owns a community cheest jail free card
- chance_jail_free_card: If the player owns a chance jail free card